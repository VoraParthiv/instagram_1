#!/usr/bin/env node
/* eslint-disable no-console */
/* eslint-disable no-restricted-globals */

const http = require('http');
// const mongoose = require('mongoose');
require('dotenv').config();
const debug = require('debug')('instagram:server');

const app = require('../app');
const io = require('../socket');
const { connectToDatabase } = require('../server');

if (process.env.NODE_ENV === 'test') {
  connectToDatabase().then(() => console.log('Connect with Test DB'));
} else {
  connectToDatabase().then(() => console.log('Connect with Development DB'));
}

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}
const port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

const server = http.createServer(app);
io.io.attach(server);

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
}
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
